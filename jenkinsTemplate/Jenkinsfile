@Library('tf-microsvc-global-shared-library@master')_
node('Dev1') {
    wrap([$class: 'BuildUser']) {

        def repoName = "csr-mgmt"
        properties([[$class: 'JobRestrictionProperty'], parameters([choice(choices: ['csrmgmt-api'], description: 'Select service to build', name: 'ServiceToBuild'), 
            gitParameter(branch: '', branchFilter: '.*', defaultValue: 'origin/master', description: 'Select the branch to build', listSize: '0', name: 'BranchtoBuild', 
                quickFilterEnabled: true, useRepository: ".*${repoName}.git", selectedValue: 'DEFAULT', sortMode: 'ASCENDING_SMART', tagFilter: '*', type: 'PT_BRANCH'),
            choice(choices: ['none', 'sita', 'sitd', 'site', 'sitf', 'sitg', 'sitz'], description: 'Select the Environment to Deploy. Select none if you don\'t want to deploy', name: 'EnvSelect'),
            string(defaultValue: 'None', description: 'Enter DSS Ticket # or Build Description', name: 'BuildDesc', trim: true)])])
        
        builddesc()

    if("${JOB_NAME}" ==~ /(Sandbox)\/(.+)$/) {
        ArtifactoryRepo = "microsvc-mvn-devtest"
        targetArtifactoryRepo = "microsvc-mvn-devtest"
    } else {
        ArtifactoryRepo = "microsvc-mvn-dev"
        targetArtifactoryRepo = "microsvc-mvn-dev"
    }

    def statusMessage=''
    def ServicePath=''
    def StageName = env.STAGE_NAME
    
    //Echo Job Parameters
    echo "${JOB_NAME}"
    echo 'echoing sandbox detection settings:'
    echo "RepoName: ${repoName} "
    echo "ArtifactoryRepo: ${ArtifactoryRepo}"
    echo "targetArtifactoryRepo: ${targetArtifactoryRepo}" 
    echo 'echoing user selected parameters:'
    echo "ServiceToBuild: ${ServiceToBuild}"
    echo "BranchtoBuild: ${BranchtoBuild}"
    echo "EnvSelect: ${EnvSelect}"
    echo "BuildDesc: ${BuildDesc}"
    echo "Job Name: ${JOB_NAME}"

    try{
        stage('Cleanup'){
            StageName = env.STAGE_NAME
            cleanup()
            sh 'ls -al'
            echo "clean up done"
        
        }

        stage('Checkout'){
            StageName = env.STAGE_NAME
            checkout([$class: 'GitSCM', branches: [[name: '${BranchtoBuild}']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'SVC-Jenkins', url: "git@git.tracfone.com:Tracfone/${repoName}.git"]]])
            
        }

        stage('Sonar Scan'){
            StageName = env.STAGE_NAME
            //sonarScanner()
        }

        stage('Build'){
            StageName = env.STAGE_NAME
            mavenBuild()
        }

        stage('Unit Test'){
            StageName = env.STAGE_NAME
            unitTests()
        }

        stage ('Upload Artifact') {
            StageName = env.STAGE_NAME
            uploadArtifact(ArtifactoryRepo,repoName,targetArtifactoryRepo)
        }

        stage ('Generate Config Files & Download Artifacts') {
            StageName = env.STAGE_NAME
            generateConfigFiles(ArtifactoryRepo,repoName)
        }

        stage ('Deploy') {
            StageName = env.STAGE_NAME
            deployArtifact(ArtifactoryRepo,repoName,targetArtifactoryRepo)
            postDeploy(ArtifactoryRepo,repoName,targetArtifactoryRepo)
            emailNotify(currentBuild.result,StageName)
            //currentBuild.result = 'SUCCESS'
            echo "RESULT POST: ${currentBuild.result}" 
        }
        
    } catch (e) {
        currentBuild.result = "FAILED"
        emailNotify(currentBuild.result,StageName)
        throw e
        }
    }
}

